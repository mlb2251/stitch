{
  "cmd": "/home/kavi/mit/stitch/target/debug/deps/integration_tests-21175b69aaefd7be",
  "args": {
    "iterations": 10,
    "abstraction_prefix": "fn_",
    "previous_abstractions": 0,
    "shuffle": false,
    "truncate": null,
    "no_opt": false,
    "silent": false,
    "verbose_rewrite": false,
    "step": {
      "max_arity": 3,
      "threads": 1,
      "no_stats": false,
      "batch": 1,
      "dynamic_batch": false,
      "eta_long": false,
      "no_curried_metavars": false,
      "no_curried_bodies": false,
      "inv_candidates": 1,
      "hole_choice": "DepthFirst",
      "cost": {
        "cost_lam": 1,
        "cost_app": 1,
        "cost_var": 100,
        "cost_ivar": 100,
        "cost_prim_default": 100,
        "cost_prim": "{}"
      },
      "no_mismatch_check": false,
      "follow": null,
      "follow_types": null,
      "follow_prune": false,
      "verbose_worklist": false,
      "verbose_best": false,
      "print_stats": 0,
      "show_rewritten": false,
      "rewritten_dreamcoder": false,
      "rewritten_intermediates": false,
      "inv_arg_cap": false,
      "allow_single_task": false,
      "no_opt_single_use": false,
      "no_opt_upper_bound": false,
      "no_opt_force_multiuse": false,
      "no_opt_useless_abstract": false,
      "no_opt_arity_zero": false,
      "no_other_util": false,
      "structure_penalty": 1.0,
      "rewrite_check": true,
      "utility_by_rewrite": false,
      "dreamcoder_comparison": false,
      "quiet": false,
      "fused_lambda_tags": {
        "tags": null
      },
      "tdfa": {
        "tdfa_json_path": null,
        "tdfa_root": null,
        "valid_metavars": null,
        "valid_roots": null,
        "tdfa_non_eta_long_states": null,
        "tdfa_split": null
      },
      "symvar": {
        "symvar_prefix": null
      }
    }
  },
  "original_cost": 15273,
  "final_cost": 4540,
  "compression_ratio": 3.3640969162995593,
  "num_abstractions": 10,
  "original": [
    "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) 1))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ 1 ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (+ (if (empty? (cdr $0)) 0 ($1 (cdr $0))) 1)))))",
    "(lam (fix1 $0 (lam (lam (+ 1 (if (empty? (cdr $0)) 0 ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) 1 (+ 1 ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (eq? $0 0) empty (cons (+ 1 $0) ($1 (- $0 1))))))))",
    "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (+ $0 1) ($1 (- $0 1))))))))",
    "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (+ 1 $0) ($1 (- $0 1))))))))",
    "(lam (fix1 $0 (lam (lam (if (gt? $0 0) (cons (+ $0 1) ($1 (- $0 1))) empty)))))",
    "(lam (fix1 $0 (lam (lam (if (gt? $0 0) (cons (+ 1 $0) ($1 (- $0 1))) empty)))))",
    "(lam (fix1 $0 (lam (lam (if (eq? $0 0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (+ $0 1))))))))",
    "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ $0 1))) empty)))))",
    "(lam (fix1 $0 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ 1 $0))) empty)))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (car $0) ($1 (cdr (cdr $0)))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (car $0) ($1 (cdr (cdr $0)))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? (if (empty? $0) empty $0)) empty (cons (car $0) ($1 (cdr (cdr $0)))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) empty (cons (car $0) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (cons (car $0) (if (empty? (cdr (cdr $0))) empty ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) (cdr $0) (cons (car $0) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 0 (cons (car $0) ($1 (cdr $0))))))))))",
    "(lam (fix1 $0 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 1 (cons (car $0) ($1 (cdr $0))))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))))",
    "(lam (fix1 $0 (lam (lam (cons (car $0) (cons (car $0) (if (empty? (cdr $0)) empty ($1 (cdr $0)))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) (car $0)))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ (car $0) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (+ (car $0) (if (empty? (cdr $0)) 0 ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (+ (if (empty? (cdr $0)) 0 ($1 (cdr $0))) (car $0))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) (car $0) (+ ($1 (cdr $0)) (car $0)))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) (cons 0 empty) (cons (car $0) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) (cons 0 $0) (cons (car $0) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (cons (car $0) (if (empty? (cdr $0)) (cons 0 empty) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) (cons (- 1 1) empty) (cons (car $0) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (cons (if (empty? $0) 0 (car $0)) (if (empty? $0) empty ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (cons (+ (car $0) (car $0)) (if (empty? (cdr $0)) empty ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (+ (car $0) 1) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (+ 1 (car $0)) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (+ (car $0) 1) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (+ 1 (car $0)) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (cons (+ (car $0) 1) (if (empty? (cdr $0)) empty ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (- 0 (car $0)) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (- 0 (car $0)) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (cons (- 0 (car $0)) (if (empty? (cdr $0)) empty ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (- 1 (+ (car $0) 1)) ($1 (cdr $0))))))))",
    "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (- 1 (+ 1 (car $0))) ($1 (cdr $0))))))))"
  ],
  "rewritten": [
    "(fn_2 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) 1)))))",
    "(fn_2 (lam (lam (if (empty? $0) 0 (fn_8 ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (+ (fn_0 $0 $1 0) 1))))",
    "(fn_2 (lam (lam (fn_8 (fn_0 $0 $1 0)))))",
    "(fn_2 (lam (lam (if (empty? (cdr $0)) 1 (fn_8 ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (if (eq? $0 0) empty (cons (fn_8 $0) ($1 (- $0 1)))))))",
    "(fn_2 (lam (lam (if (eq? 0 $0) empty (cons (+ $0 1) ($1 (- $0 1)))))))",
    "(fn_1 - fn_8)",
    "(fn_2 (lam (lam (if (gt? $0 0) (cons (+ $0 1) ($1 (- $0 1))) empty))))",
    "(fn_2 (lam (lam (if (gt? $0 0) (cons (fn_8 $0) ($1 (- $0 1))) empty))))",
    "(fn_2 (lam (lam (if (eq? $0 0) empty (cons (- 0 $0) ($1 (fn_8 $0)))))))",
    "(fn_1 + (- 0))",
    "(fn_2 (lam (lam (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (fn_8 $0)))))))",
    "(fn_2 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ $0 1))) empty))))",
    "(fn_2 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (fn_8 $0))) empty))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (car $0) ($1 (cdr (cdr $0))))))))",
    "(fn_2 (lam (lam (fn_4 $0 cdr $1))))",
    "(fn_2 (lam (lam (if (empty? (if (empty? $0) empty $0)) empty (cons (car $0) ($1 (cdr (cdr $0))))))))",
    "(fn_2 (lam (lam (fn_9 (cdr $0) $1 (cons (car $0))))))",
    "(fn_2 (lam (lam (cons (car $0) (if (empty? (cdr (cdr $0))) empty ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (if (empty? (cdr $0)) (cdr $0) (cons (car $0) ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 0 (cons (car $0) ($1 (cdr $0)))))))))",
    "(fn_2 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 1 (cons (car $0) ($1 (cdr $0)))))))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (car $0) (cons (car $0) ($1 (cdr $0))))))))",
    "(fn_6 cons fn_4)",
    "(fn_2 (lam (lam (cons (car $0) (cons (car $0) (fn_0 $0 $1 empty))))))",
    "(fn_2 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) (car $0))))))",
    "(fn_2 (lam (lam (if (empty? $0) 0 (+ (car $0) ($1 (cdr $0)))))))",
    "(fn_5 0 +)",
    "(fn_2 (lam (lam (+ (fn_0 $0 $1 0) (car $0)))))",
    "(fn_2 (lam (lam (if (empty? (cdr $0)) (car $0) (+ ($1 (cdr $0)) (car $0))))))",
    "(fn_2 (lam (lam (if (empty? $0) (cons 0 empty) (cons (car $0) ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (if (empty? $0) (cons 0 $0) (cons (car $0) ($1 (cdr $0)))))))",
    "(fn_5 (cons 0 empty) cons)",
    "(fn_2 (lam (lam (if (empty? $0) (cons (- 1 1) empty) (cons (car $0) ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (cons (if (empty? $0) 0 (car $0)) (fn_9 $0 cdr $1)))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (+ (car $0) (car $0)) ($1 (cdr $0)))))))",
    "(fn_6 + fn_3)",
    "(fn_2 (lam (lam (cons (+ (car $0) (car $0)) (fn_0 $0 $1 empty)))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (+ (car $0) 1) ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (fn_8 (car $0)) ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (if (empty? $0) $0 (cons (+ (car $0) 1) ($1 (cdr $0)))))))",
    "(fn_7 fn_8)",
    "(fn_2 (lam (lam (cons (+ (car $0) 1) (fn_0 $0 $1 empty)))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (- 0 (car $0)) ($1 (cdr $0)))))))",
    "(fn_7 (- 0))",
    "(fn_2 (lam (lam (cons (- 0 (car $0)) (fn_0 $0 $1 empty)))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (- 1 (+ (car $0) 1)) ($1 (cdr $0)))))))",
    "(fn_2 (lam (lam (if (empty? $0) empty (cons (- 1 (fn_8 (car $0))) ($1 (cdr $0)))))))"
  ],
  "rewritten_dreamcoder": null,
  "abstractions": [
    {
      "body": "(if (empty? (cdr #0)) #2 (#1 (cdr #0)))",
      "dreamcoder": "#(lambda (lambda (lambda (if (empty? (cdr $2)) $0 ($1 (cdr $2))))))",
      "arity": 3,
      "name": "fn_0",
      "utility": 1714,
      "final_cost": 13152,
      "compression_ratio": 1.1612682481751824,
      "cumulative_compression_ratio": 1.1612682481751824,
      "num_uses": 9,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_0 $0 $1 (cons 0 empty)": "(if (empty? (cdr $0)) (cons 0 empty) ($1 (cdr $0)))"
        },
        {
          "fn_0 $0 $1 0": "(if (empty? (cdr $0)) 0 ($1 (cdr $0)))"
        },
        {
          "fn_0 $0 $1 empty": "(if (empty? (cdr $0)) empty ($1 (cdr $0)))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M",
        "M",
        "M"
      ]
    },
    {
      "body": "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (#1 $0) ($1 (#0 $0 1))))))))",
      "dreamcoder": "#(lambda (lambda (lambda (fix1 $0 (lambda (lambda (if (eq? 0 $0) empty (cons ($3 $0) ($1 ($4 $0 1))))))))))",
      "arity": 2,
      "name": "fn_1",
      "utility": 1012,
      "final_cost": 10924,
      "compression_ratio": 1.2039545953863053,
      "cumulative_compression_ratio": 1.3981142438667156,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_1 - (+ 1)": "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (+ 1 $0) ($1 (- $0 1))))))))"
        },
        {
          "fn_1 + (- 0)": "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (+ $0 1))))))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M",
        "M"
      ]
    },
    {
      "body": "(lam (fix1 $0 #0))",
      "dreamcoder": "#(lambda (lambda (fix1 $0 $1)))",
      "arity": 1,
      "name": "fn_2",
      "utility": 715,
      "final_cost": 10006,
      "compression_ratio": 1.091744953028183,
      "cumulative_compression_ratio": 1.526384169498301,
      "num_uses": 47,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_2 (lam (lam (+ (car $0) (fn_0 $0 $1 0))))": "(lam (fix1 $0 (lam (lam (+ (car $0) (fn_0 $0 $1 0))))))"
        },
        {
          "fn_2 (lam (lam (+ (fn_0 $0 $1 0) (car $0))))": "(lam (fix1 $0 (lam (lam (+ (fn_0 $0 $1 0) (car $0))))))"
        },
        {
          "fn_2 (lam (lam (+ (fn_0 $0 $1 0) 1)))": "(lam (fix1 $0 (lam (lam (+ (fn_0 $0 $1 0) 1)))))"
        },
        {
          "fn_2 (lam (lam (+ 1 (fn_0 $0 $1 0))))": "(lam (fix1 $0 (lam (lam (+ 1 (fn_0 $0 $1 0))))))"
        },
        {
          "fn_2 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 0 (cons (car $0) ($1 (cdr $0))))))))": "(lam (fix1 $0 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 0 (cons (car $0) ($1 (cdr $0))))))))))"
        },
        {
          "fn_2 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 1 (cons (car $0) ($1 (cdr $0))))))))": "(lam (fix1 $0 (lam (lam (cdr (if (empty? (cdr $0)) $0 (cons 1 (cons (car $0) ($1 (cdr $0))))))))))"
        },
        {
          "fn_2 (lam (lam (cons (+ (car $0) (car $0)) (fn_0 $0 $1 empty))))": "(lam (fix1 $0 (lam (lam (cons (+ (car $0) (car $0)) (fn_0 $0 $1 empty))))))"
        },
        {
          "fn_2 (lam (lam (cons (+ (car $0) 1) (fn_0 $0 $1 empty))))": "(lam (fix1 $0 (lam (lam (cons (+ (car $0) 1) (fn_0 $0 $1 empty))))))"
        },
        {
          "fn_2 (lam (lam (cons (- 0 (car $0)) (fn_0 $0 $1 empty))))": "(lam (fix1 $0 (lam (lam (cons (- 0 (car $0)) (fn_0 $0 $1 empty))))))"
        },
        {
          "fn_2 (lam (lam (cons (car $0) (cons (car $0) (fn_0 $0 $1 empty)))))": "(lam (fix1 $0 (lam (lam (cons (car $0) (cons (car $0) (fn_0 $0 $1 empty)))))))"
        },
        {
          "fn_2 (lam (lam (cons (car $0) (fn_0 $0 $1 (cons 0 empty)))))": "(lam (fix1 $0 (lam (lam (cons (car $0) (fn_0 $0 $1 (cons 0 empty)))))))"
        },
        {
          "fn_2 (lam (lam (cons (car $0) (if (empty? (cdr (cdr $0))) empty ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (cons (car $0) (if (empty? (cdr (cdr $0))) empty ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (cons (if (empty? $0) 0 (car $0)) (if (empty? $0) empty ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (cons (if (empty? $0) 0 (car $0)) (if (empty? $0) empty ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) $0 (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) $0 (cons (+ (car $0) 1) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (+ (car $0) 1) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) $0 (cons (+ 1 (car $0)) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (+ 1 (car $0)) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) $0 (cons (- 0 (car $0)) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (- 0 (car $0)) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) $0 (cons (car $0) ($1 (cdr (cdr $0)))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (car $0) ($1 (cdr (cdr $0)))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) $0 (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) $0 (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) (cons (- 1 1) empty) (cons (car $0) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) (cons (- 1 1) empty) (cons (car $0) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) (cons 0 $0) (cons (car $0) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) (cons 0 $0) (cons (car $0) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) (cons 0 empty) (cons (car $0) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) (cons 0 empty) (cons (car $0) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) (car $0)))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) (car $0)))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) 1))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ ($1 (cdr $0)) 1))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) 0 (+ (car $0) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ (car $0) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) 0 (+ 1 ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) 0 (+ 1 ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (+ (car $0) (car $0)) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (+ (car $0) 1) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (+ (car $0) 1) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (+ 1 (car $0)) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (+ 1 (car $0)) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (- 0 (car $0)) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (- 0 (car $0)) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (- 1 (+ (car $0) 1)) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (- 1 (+ (car $0) 1)) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (- 1 (+ 1 (car $0))) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (- 1 (+ 1 (car $0))) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (car $0) ($1 (cdr (cdr $0)))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (car $0) ($1 (cdr (cdr $0)))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? $0) empty (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))": "(lam (fix1 $0 (lam (lam (if (empty? $0) empty (cons (car $0) (cons (car $0) ($1 (cdr $0)))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? (cdr $0)) (car $0) (+ ($1 (cdr $0)) (car $0)))))": "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) (car $0) (+ ($1 (cdr $0)) (car $0)))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? (cdr $0)) (cdr $0) (cons (car $0) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) (cdr $0) (cons (car $0) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? (cdr $0)) 1 (+ 1 ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) 1 (+ 1 ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? (cdr $0)) empty (cons (car $0) ($1 (cdr $0))))))": "(lam (fix1 $0 (lam (lam (if (empty? (cdr $0)) empty (cons (car $0) ($1 (cdr $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (empty? (if (empty? $0) empty $0)) empty (cons (car $0) ($1 (cdr (cdr $0)))))))": "(lam (fix1 $0 (lam (lam (if (empty? (if (empty? $0) empty $0)) empty (cons (car $0) ($1 (cdr (cdr $0)))))))))"
        },
        {
          "fn_2 (lam (lam (if (eq? $0 0) empty (cons (+ 1 $0) ($1 (- $0 1))))))": "(lam (fix1 $0 (lam (lam (if (eq? $0 0) empty (cons (+ 1 $0) ($1 (- $0 1))))))))"
        },
        {
          "fn_2 (lam (lam (if (eq? $0 0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))": "(lam (fix1 $0 (lam (lam (if (eq? $0 0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (eq? 0 $0) empty (cons (+ $0 1) ($1 (- $0 1))))))": "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (+ $0 1) ($1 (- $0 1))))))))"
        },
        {
          "fn_2 (lam (lam (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))": "(lam (fix1 $0 (lam (lam (if (eq? 0 $0) empty (cons (- 0 $0) ($1 (+ 1 $0))))))))"
        },
        {
          "fn_2 (lam (lam (if (gt? $0 0) (cons (+ $0 1) ($1 (- $0 1))) empty)))": "(lam (fix1 $0 (lam (lam (if (gt? $0 0) (cons (+ $0 1) ($1 (- $0 1))) empty)))))"
        },
        {
          "fn_2 (lam (lam (if (gt? $0 0) (cons (+ 1 $0) ($1 (- $0 1))) empty)))": "(lam (fix1 $0 (lam (lam (if (gt? $0 0) (cons (+ 1 $0) ($1 (- $0 1))) empty)))))"
        },
        {
          "fn_2 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ $0 1))) empty)))": "(lam (fix1 $0 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ $0 1))) empty)))))"
        },
        {
          "fn_2 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ 1 $0))) empty)))": "(lam (fix1 $0 (lam (lam (if (gt? 0 $0) (cons (- 0 $0) ($1 (+ 1 $0))) empty)))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M"
      ]
    },
    {
      "body": "(if (empty? #0) #0 (cons (#2 (car #0)) (#1 (cdr #0))))",
      "dreamcoder": "#(lambda (lambda (lambda (if (empty? $2) $2 (cons ($0 (car $2)) ($1 (cdr $2)))))))",
      "arity": 3,
      "name": "fn_3",
      "utility": 702,
      "final_cost": 8794,
      "compression_ratio": 1.1378212417557425,
      "cumulative_compression_ratio": 1.7367523311348647,
      "num_uses": 3,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_3 $0 $1 (+ (car $0))": "(if (empty? $0) $0 (cons (+ (car $0) (car $0)) ($1 (cdr $0))))"
        },
        {
          "fn_3 $0 $1 (+ 1)": "(if (empty? $0) $0 (cons (+ 1 (car $0)) ($1 (cdr $0))))"
        },
        {
          "fn_3 $0 $1 (- 0)": "(if (empty? $0) $0 (cons (- 0 (car $0)) ($1 (cdr $0))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M",
        "M",
        "M"
      ]
    },
    {
      "body": "(if (empty? #0) #0 (cons (car #0) (#2 (#1 (cdr #0)))))",
      "dreamcoder": "#(lambda (lambda (lambda (if (empty? $2) $2 (cons (car $2) ($0 ($1 (cdr $2))))))))",
      "arity": 3,
      "name": "fn_4",
      "utility": 601,
      "final_cost": 7683,
      "compression_ratio": 1.1446049720161395,
      "cumulative_compression_ratio": 1.987895353377587,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_4 $0 cdr $1": "(if (empty? $0) $0 (cons (car $0) ($1 (cdr (cdr $0)))))"
        },
        {
          "fn_4 $0 $1 (cons (car $0))": "(if (empty? $0) $0 (cons (car $0) (cons (car $0) ($1 (cdr $0)))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M",
        "M",
        "M"
      ]
    },
    {
      "body": "(fn_2 (lam (lam (#1 (car $0) (fn_0 $0 $1 #0)))))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fix1 $0 $1))) (lambda (lambda ($2 (car $0) (#(lambda (lambda (lambda (if (empty? (cdr $2)) $0 ($1 (cdr $2)))))) $0 $1 $3)))))))",
      "arity": 2,
      "name": "fn_5",
      "utility": 405,
      "final_cost": 6669,
      "compression_ratio": 1.152046783625731,
      "cumulative_compression_ratio": 2.290148448043185,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_5 0 +": "(fn_2 (lam (lam (+ (car $0) (fn_0 $0 $1 0)))))"
        },
        {
          "fn_5 (cons 0 empty) cons": "(fn_2 (lam (lam (cons (car $0) (fn_0 $0 $1 (cons 0 empty))))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M",
        "M"
      ]
    },
    {
      "body": "(fn_2 (lam (lam (#1 $0 $1 (#0 (car $0))))))",
      "dreamcoder": "#(lambda (lambda (#(lambda (lambda (fix1 $0 $1))) (lambda (lambda ($2 $0 $1 ($3 (car $0))))))))",
      "arity": 2,
      "name": "fn_6",
      "utility": 304,
      "final_cost": 5857,
      "compression_ratio": 1.138637527744579,
      "cumulative_compression_ratio": 2.607648967047977,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_6 + fn_3": "(fn_2 (lam (lam (fn_3 $0 $1 (+ (car $0))))))"
        },
        {
          "fn_6 cons fn_4": "(fn_2 (lam (lam (fn_4 $0 $1 (cons (car $0))))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M",
        "M"
      ]
    },
    {
      "body": "(fn_2 (lam (lam (fn_3 $0 $1 #0))))",
      "dreamcoder": "#(lambda (#(lambda (lambda (fix1 $0 $1))) (lambda (lambda (#(lambda (lambda (lambda (if (empty? $2) $2 (cons ($0 (car $2)) ($1 (cdr $2))))))) $0 $1 $2)))))",
      "arity": 1,
      "name": "fn_7",
      "utility": 204,
      "final_cost": 5247,
      "compression_ratio": 1.116256908709739,
      "cumulative_compression_ratio": 2.9108061749571186,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_7 (+ 1)": "(fn_2 (lam (lam (fn_3 $0 $1 (+ 1)))))"
        },
        {
          "fn_7 (- 0)": "(fn_2 (lam (lam (fn_3 $0 $1 (- 0)))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M"
      ]
    },
    {
      "body": "(+ 1)",
      "dreamcoder": "#(+ 1)",
      "arity": 0,
      "name": "fn_8",
      "utility": 102,
      "final_cost": 4944,
      "compression_ratio": 1.0612864077669903,
      "cumulative_compression_ratio": 3.0891990291262137,
      "num_uses": 12,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_8 ": "(+ 1)"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": []
    },
    {
      "body": "(if (empty? #0) empty (#2 (#1 #0)))",
      "dreamcoder": "#(lambda (lambda (lambda (if (empty? $2) empty ($0 ($1 $2))))))",
      "arity": 3,
      "name": "fn_9",
      "utility": 98,
      "final_cost": 4540,
      "compression_ratio": 1.088986784140969,
      "cumulative_compression_ratio": 3.3640969162995593,
      "num_uses": 2,
      "rewritten": null,
      "rewritten_dreamcoder": null,
      "uses": [
        {
          "fn_9 $0 cdr $1": "(if (empty? $0) empty ($1 (cdr $0)))"
        },
        {
          "fn_9 (cdr $0) $1 (cons (car $0))": "(if (empty? (cdr $0)) empty (cons (car $0) ($1 (cdr $0))))"
        }
      ],
      "dc_comparison_millis": null,
      "tdfa_annotation": null,
      "variable_types": [
        "M",
        "M",
        "M"
      ]
    }
  ]
}